# 私有仓库加速本地访问
image: 2358bm94.mirror.aliyuncs.com/library/node:12

variables:
  DOCKER_DRIVER: overlay2
  # npm 私有仓库镜像，以后组件化下载通道
  NPM_REGISTRY: 'http://npm-reg.devops.ichoice.cc'
  # 设置项目名称，以便推至相应目录下
  TARGET_PROJECT_NAME: 'doctor-recipe'
  # 指定发布页面
  TARGET_PUBLISH_PAGE: 'Test'
  # 测试开发环境变量
  DEVELOP_DEPLOY: 'pre'
  # 测试开发环境访问路径
  DEVELOP_REMOTES_ORIGIN: 'http://${DEVELOP_DEPLOY}.m.myweimai.com/platform/'
  # 测试开发服务器地址
  DEVELOP_REMOTES_ADDRESS: '192.168.1.216'
  # 发送群消息
  DINGDING_ACCESS_TOKEN: '385c9d643fbfd0d60b93a46dc5e06fb3f974a4c04f4a3cb296beb8d1f7ce08b3'
  # 当前分支环境访问路径
  CI_COMMIT_DEVELOP_REMOTES_ORIGIN: 'http://${CI_COMMIT_REF_NAME}.m.myweimai.com/platform/'
  # 测试开发环境访问路径
  PRODUCTION_REMOTES_ORIGIN: 'http://m.myweimai.com/platform/'
  # 构建产物目录
  OUTOUT_FOLDER: './dist'
  # 构建时间戳
  TIMESTAMP: ''
  # package存储的位置
  NODEMODULECACHE: 'nodemodule_cache'
  # 当前package版本对应的node_module的名称或目录
  PACKAGENAME: ''
  # 判断当前package版本对应的node_module是否存在的动态变量
  PACKAGEEXIST: 'no'

stages:
  - CI_BUILD
  - CI_DEPLOY_1
  - CI_DEPLOY_2

测试环境构建任务:
  stage: CI_BUILD
  script:
    - PACKAGENAME=`md5sum ./package.json|cut -d" " -f1` #执行脚本
    - TIMESTAMP=`date +%Y%m%d%H%M`
    - echo ${TIMESTAMP}
    - echo "mplatform@${DEVELOP_REMOTES_ADDRESS}:/home/mplatform/${DEVELOP_DEPLOY}/"
    - cd ..
    - if [ ! -d "nodemodule_cache/" ];then
      mkdir nodemodule_cache;
      PACKAGEEXIST='no';
      else
      echo 'nodemodule已存在';
      fi;
    - cd $NODEMODULECACHE
    - if [ ! -d "$PACKAGENAME" ];then
      mkdir $PACKAGENAME;
      PACKAGEEXIST='no';
      else
      echo 'package已存在';
      fi;
    - cp -r ../$CI_PROJECT_NAME/. ./$PACKAGENAME
    - cd $PACKAGENAME;
    - rm -rf ${TARGET_PROJECT_NAME}

    # 设置私有镜像, 方便拉取私有仓库代码
    - yarn config set registry ${NPM_REGISTRY}
    - yarn config set ignore-engines true
    # 安装依赖
    - yarn
    # 构建打包
    - yarn run build -- --timestamp T${TIMESTAMP}
    # ssh 免密隧道授权
    - eval $(ssh-agent -s)
    - echo "$DEVELOP_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan ${DEVELOP_REMOTES_ADDRESS} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # 查看目录是否存在，并尝试创建
    - ssh -p22 mplatform@${DEVELOP_REMOTES_ADDRESS} "if [ ! -d /home/mplatform/${DEVELOP_DEPLOY}/${TARGET_PROJECT_NAME} ];then mkdir /home/mplatform/${CI_COMMIT_REF_NAME}/${TARGET_PROJECT_NAME} -p; fi"
    # 重命令目录文件夹
    - cp -r ${OUTOUT_FOLDER} ${TARGET_PROJECT_NAME}
    # 传输构建文件到开发服务器
    - scp -P22 -r ${TARGET_PROJECT_NAME} mplatform@${DEVELOP_REMOTES_ADDRESS}:/home/mplatform/${DEVELOP_DEPLOY}/
  environment:
    name: Test/$CI_COMMIT_REF_NAME
    url: ${DEVELOP_REMOTES_ORIGIN}${TARGET_PROJECT_NAME}/
  only:
    - triggers
  except:
    - master

线上环境构建任务:
  stage: CI_DEPLOY_1
  script:
    # - PACKAGENAME=`md5sum ./package.json|cut -d" " -f1` #执行脚本
    - TIMESTAMP=`date +%Y%m%d%H%M`
    # - echo ${TIMESTAMP}
    # - cd ..
    # - if [ ! -d "nodemodule_cache/" ];then
    #   mkdir nodemodule_cache;
    #   PACKAGEEXIST='no';
    #   else
    #   echo 'nodemodule已存在';
    #   fi;
    # - cd $NODEMODULECACHE
    # - if [ ! -d "$PACKAGENAME" ];then
    #   mkdir $PACKAGENAME;
    #   PACKAGEEXIST='no';
    #   else
    #   echo 'package已存在';
    #   fi;
    # - cp -r ../$CI_PROJECT_NAME/. ./$PACKAGENAME
    # - cd $PACKAGENAME;
    # - rm -rf ${TARGET_PROJECT_NAME}

    # 设置私有镜像, 方便拉取私有仓库代码
    - yarn config set registry ${NPM_REGISTRY}
    # 安装依赖
    - yarn
    # 修复npm安全漏洞
    # - yarn audit fix
    # 测试任务
    # - yarn run tslint
    # 构建打包
    - yarn run site -- --timestamp T${TIMESTAMP}
    - pwd
    - ls -l
    # 钉钉群消息
    - |
      # curl -H "Content-Type:application/json" -X POST -d "{'actionCard':{'title':'应用 ${CI_PROJECT_NAME} 打包完成','text':'部署应用 ${CI_PROJECT_NAME}','btnOrientation':'0','btns':[{'title':'发布','actionURL':'http://git.ichoice.cc/${CI_PROJECT_PATH}/pipelines/'}]},'msgtype':'actionCard'}" https://oapi.dingtalk.com/robot/send?access_token=${DINGDING_ACCESS_TOKEN}
  only:
    - tags
  artifacts:
    paths:
      - ${OUTOUT_FOLDER}
    expire_in: 2 weeks

线上环境部署任务:
  stage: CI_DEPLOY_2
  script:
    # ssh 免密隧道授权
    - eval $(ssh-agent -s)
    - echo "$DEVELOP_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan ${DEVELOP_REMOTES_ADDRESS} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # 重命令目录文件夹
    - cp -r ${OUTOUT_FOLDER} ${TARGET_PROJECT_NAME}
    # 传输构建文件到开发服务器
    - scp -P22 -r ${TARGET_PROJECT_NAME} mplatform@${DEVELOP_REMOTES_ADDRESS}:/home/mplatform_deploy/
    # 执行shell部署脚本
    - ssh -p22 mplatform@${DEVELOP_REMOTES_ADDRESS} "python /opt/scripts/upload_platform.py ${TARGET_PROJECT_NAME}"

  environment:
    name: Production
    url: ${PRODUCTION_REMOTES_ORIGIN}${TARGET_PROJECT_NAME}/
  only:
    - tags
  when: manual
